import requests

# Flask 应用程序的地址和端口
url = "http://110.41.40.215:8044/ocr"


# GET 请求测试
def test_get():
    params = {
        "captcha": ""
    }
    response = requests.get(url, params=params)
    print("GET Response:", response.text)


# POST 请求测试
def test_post():
    payload = {
        "captcha": ""
    }
    response = requests.post(url, data=payload)
    print("POST Response:", response.text)


# 调用测试函数
test_get()
test_post()
